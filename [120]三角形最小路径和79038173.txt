/**
 * @param {number[][]} triangle
 * @return {number}
 */
var minimumTotal = function(triangle) {
    //从下往上 dp[i][j] = min(dp[i+1][j+1], dp[i+1][j])+triangle[i][j]
    //从上往下 dp[i][j] = min(dp[i-1][j], dp[i-1][j-1])+triangle[i][j] 
    //临界点j=0或者j=最后一个元素
    let dp = Array.from(new Array(triangle.length), ()=>new Array(triangle.length).fill(Infinity))
    dp[0][0] = triangle[0][0]
    for(let i=1; i<triangle.length;i++){
        for(let j=0; j<triangle[i].length; j++){
            if(j==0) dp[i][j] = dp[i-1][j]+triangle[i][j]
            else if(j==triangle[i].length-1) dp[i][j] = dp[i-1][j-1]+triangle[i][j]
            else dp[i][j] = Math.min(dp[i-1][j], dp[i-1][j-1])+triangle[i][j] 
        }
    }

    return Math.min(...dp[triangle.length-1])
};
//runtime:92 ms
//memory:36.8 MB
