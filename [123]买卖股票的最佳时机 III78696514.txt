/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function(prices) {
    if(prices.length==0) return 0
    let N = prices.length 
    let dp = new Array(N).fill(0)

    for(let i=0; i<=N; i++){
        dp[i] = new Array
        for(let j=0; j<=2; j++){
            dp[i][j] = new Array
            for(let k=0; k<2; k++){
                dp[i][j][k] = 0
            }
        }  
    }

    dp[0][1][0] = 0
    dp[0][1][1] = -prices[0]
    dp[0][2][0] = 0
    dp[0][2][1] = -prices[0]
    
    for(let j=1; j<=2; j++){
        for(let i=1; i<N; i++){
            dp[i][j][0] = Math.max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
            dp[i][j][1] = Math.max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])
        }
    }

    return dp[N-1][2][0]
};
//runtime:112 ms
//memory:49.3 MB
