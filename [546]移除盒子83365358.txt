/**
 * @param {number[]} boxes
 * @return {number}
 */
var removeBoxes = function(boxes) {
    //dp[i][j][k]表示i前面有k个元素和boxse[i]相同
    //dp[i][j][k] = (k+1)*(k+1)+dp[i+1][j][0]
    //dp[i][j][k] = Math.max(dp[i][j][k], dp[i+1][m-1][0]+dp[m][j][k+1])
    let n = boxes.length
    let dp = new Array()
    for(let i=0; i<=n; i++){
        dp[i] = new Array
        for(let j=0; j<=n; j++){
            dp[i][j] = new Array
            for(let k=0; k<=n; k++){
                if(i==j && k<=i){
                    dp[i][j][k] = (k+1)*(k+1)
                }else{
                    dp[i][j][k] = 0
                }
            }
        }
    }

    for(let t=1; t<n; t++) {
        for(let j=1; j<n; j++){
            let i = j-t
            for(let k=0; k<=i; k++){
                dp[i][j][k] = dp[i+1][j][0] + (k+1)*(k+1)
                for(let m = i+1; m<=j; m++){
                    if(boxes[m]==boxes[i]){
                        dp[i][j][k] = Math.max(dp[i][j][k], dp[i+1][m-1][0] + dp[m][j][k+1])
                    }
                }
            }
        }
    }

    return n==0? 0: dp[0][n-1][0]
};
//runtime:736 ms
//memory:67.2 MB
